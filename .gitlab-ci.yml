# This file is a template, and might need editing before it works on your project.
# Official framework image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/python
image: registry.gitlab.com/ishankhare07/base-builder:0.2.0

stages:
  - provision
  - setup
  - test
  - build
  - deploy

services:
  - docker:dind

variables:
  REGISTRY_URL: "$CI_REGISTRY/ishankhare07"

tf_plan:
  stage: provision
  when: manual
  only:
    - tags
  script:
    - cd infra
    - echo "NODE IP CIDR"; sipcalc -ib ${TF_VAR_node_ip_range}
    - echo "POD IP CIDR"; sipcalc -ib ${TF_VAR_pod_ip_range}
    - echo "SERVICE IP CIDR"; sipcalc -ib ${TF_VAR_service_ip_range}
    - terraform init
    - terraform validate
    - terraform plan

tf_apply:
  stage: provision
  when: manual
  only:
    - tags
  script:
    - cd infra
    - echo "NODE IP CIDR"; sipcalc -ib ${TF_VAR_node_ip_range}
    - echo "POD IP CIDR"; sipcalc -ib ${TF_VAR_pod_ip_range}
    - echo "SERVICE IP CIDR"; sipcalc -ib ${TF_VAR_service_ip_range}
    - terraform init
    - terraform plan
    - terraform apply --auto-approve

tf_destroy:
  stage: provision
  when: manual
  only:
    - tags
  script:
    - cd infra
    - terraform init
    - terraform destroy --auto-approve

tf_plan_box:
  stage: provision
  when: manual
  script:
    - cd infra-box
    - terraform init
    - terraform validate
    - terraform plan

tf_apply_box:
  stage: provision
  when: manual
  script:
    - cd infra-box
    - terraform init
    - terraform validate
    - terraform apply --auto-approve

tf_destroy_box:
  stage: provision
  when: manual
  script:
    - cd infra-box
    - terraform init
    - terraform destroy --auto-approve

create_and_patch_ingress:
  stage: setup
  when: manual
  only:
    - tags
  environment:
    name: deploy
  script:
    - make create_ingress_gcp patch_ingress_service

setup_cert_manager:
  stage: setup
  when: manual
  only:
    - tags
  environment:
    name: deploy
  script:
    - make install_cert_manager

create_secrets:
  stage: setup
  when: manual
  only:
    - tags
  environment:
    name: deploy
  script:
    - echo ${IMAGE_PULL_SECRET} | base64 -d | kubectl apply -f -
    - echo ${BUCKET_SECRET} | base64 -d | kubectl apply -f -

build_and_push_to_registry:
  stage: build
  only:
    - tags
  when: manual
  environment:
    name: deploy
  script:
    - echo "registry url ${CI_REGISTRY}"
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -f ./code/Dockerfile ./code -t "${REGISTRY_URL}/ahins:${CI_COMMIT_TAG}.prod"
    - docker push "${REGISTRY_URL}/ahins:${CI_COMMIT_TAG}.prod"

build_and_push_to_registry_any_branch:
  stage: build
  except:
    - tags
  # when: manual
  environment:
    name: deploy
  script:
    - echo "registry url ${CI_REGISTRY}"
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -f ./code/Dockerfile ./code -t "${REGISTRY_URL}/ahins:${CI_COMMIT_SHORT_SHA}.prod"
    - docker push "${REGISTRY_URL}/ahins:${CI_COMMIT_SHORT_SHA}.prod"

ssh_into_box:
  stage: deploy
  except:
    - tags
  environment:
    name: deploy
  script:
    - eval $(ssh-agent)
    #- ssh-add - <<< ${CI_SSH_KEY}
    - ssh-add -k /builds/ishankhare07/ahins.tmp/CI_SSH_KEY
    - touch hello_world
    - scp ./hello_world 35.207.254.2:~/

deploy_and_test_ingress:
  stage: test
  only:
    - tags
  when: manual
  environment:
    name: staging
  script:
    - make create_echo_service_with_ingress_rule

delete_test_deploy:
  stage: test
  only:
    - tags
  when: manual
  environment:
    name: deploy
  script:
    - make remove_echo_service_ingress

create_deploy_in_k8s:
  stage: deploy
  environment:
    name: deploy
  only:
    - tags
  when: manual
  script:
    - helm template ./helm_chart --set dockerImage=${REGISTRY_URL}/ahins:${CI_COMMIT_TAG}.prod --set isProduction=true | kubectl apply -f -
    - kubectl get deploy
